{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/giaconi/code/giaconi/blog-aerdevacanta/pages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Link from \"next/link\";\n\nfunction IndexPage(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Blog list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: props.blogs.map(blog => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/${blog.slug}`,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: blog.title\n              }, blog.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 14,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} // This function gets called at build time on server-side.\n\n\nexport async function getStaticProps() {\n  const fs = require(\"fs\");\n\n  const matter = require(\"gray-matter\");\n\n  const {\n    v4: uuid\n  } = require(\"uuid\");\n\n  const files = fs.readdirSync(`${process.cwd()}/contents`, \"utf-8\");\n  const blogs = files.filter(fn => fn.endsWith(\".md\")).map(fn => {\n    const path = `${process.cwd()}/contents/${fn}`;\n    const rawContent = fs.readFileSync(path, {\n      encoding: \"utf-8\"\n    });\n    const {\n      data\n    } = matter(rawContent);\n    return _objectSpread(_objectSpread({}, data), {}, {\n      id: uuid()\n    });\n  }); // By returning { props: blogs }, the IndexPage component\n  // will receive `blogs` as a prop at build time\n\n  return {\n    props: {\n      blogs\n    }\n  };\n}\nexport default IndexPage;","map":{"version":3,"sources":["/Users/giaconi/code/giaconi/blog-aerdevacanta/pages/index.js"],"names":["React","Link","IndexPage","props","blogs","map","blog","slug","title","id","getStaticProps","fs","require","matter","v4","uuid","files","readdirSync","process","cwd","filter","fn","endsWith","path","rawContent","readFileSync","encoding","data"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,IAAU;AACzB,4BACE;AAAA,iCACE;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAG,IAAGA,IAAI,CAACC,IAAK,EAA1B;AAAA,qCACE;AAAA,0BAAkBD,IAAI,CAACE;AAAvB,iBAAQF,IAAI,CAACG,EAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AASD,OAVA;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,QAAM;AAAEE,IAAAA,EAAE,EAAEC;AAAN,MAAeH,OAAO,CAAC,MAAD,CAA5B;;AAEA,QAAMI,KAAK,GAAGL,EAAE,CAACM,WAAH,CAAgB,GAAEC,OAAO,CAACC,GAAR,EAAc,WAAhC,EAA4C,OAA5C,CAAd;AAEA,QAAMf,KAAK,GAAGY,KAAK,CAChBI,MADW,CACHC,EAAD,IAAQA,EAAE,CAACC,QAAH,CAAY,KAAZ,CADJ,EAEXjB,GAFW,CAENgB,EAAD,IAAQ;AACX,UAAME,IAAI,GAAI,GAAEL,OAAO,CAACC,GAAR,EAAc,aAAYE,EAAG,EAA7C;AACA,UAAMG,UAAU,GAAGb,EAAE,CAACc,YAAH,CAAgBF,IAAhB,EAAsB;AACvCG,MAAAA,QAAQ,EAAE;AAD6B,KAAtB,CAAnB;AAGA,UAAM;AAAEC,MAAAA;AAAF,QAAWd,MAAM,CAACW,UAAD,CAAvB;AAEA,2CAAYG,IAAZ;AAAkBlB,MAAAA,EAAE,EAAEM,IAAI;AAA1B;AACD,GAVW,CAAd,CAPqC,CAmBnC;AACF;;AACA,SAAO;AACLZ,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADF,GAAP;AAGD;AAED,eAAeF,SAAf","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\n\nfunction IndexPage(props) {\n  return (\n    <div>\n      <h1>Blog list</h1>\n      <ul>\n        {props.blogs.map((blog) => {\n          return (\n            <div>\n              <li>\n                <Link href={`/${blog.slug}`}>\n                  <p key={blog.id}>{blog.title}</p>\n                </Link>\n              </li>\n            </div>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\n// This function gets called at build time on server-side.\nexport async function getStaticProps() {\n  const fs = require(\"fs\");\n  const matter = require(\"gray-matter\");\n  const { v4: uuid } = require(\"uuid\");\n\n  const files = fs.readdirSync(`${process.cwd()}/contents`, \"utf-8\");\n\n  const blogs = files\n    .filter((fn) => fn.endsWith(\".md\"))\n    .map((fn) => {\n      const path = `${process.cwd()}/contents/${fn}`;\n      const rawContent = fs.readFileSync(path, {\n        encoding: \"utf-8\",\n      });\n      const { data } = matter(rawContent);\n\n      return { ...data, id: uuid() };\n    });\n\n    // By returning { props: blogs }, the IndexPage component\n  // will receive `blogs` as a prop at build time\n  return {\n    props: { blogs },\n  };\n}\n\nexport default IndexPage;"]},"metadata":{},"sourceType":"module"}