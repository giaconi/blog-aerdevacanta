{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/giaconi/code/giaconi/blog-aerdevacanta/pages/[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// file: pages/blog/[slug].js\nimport React from \"react\";\n\nfunction BlogPostPage(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.blog.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      dangerouslySetInnerHTML: {\n        __html: props.blog.content\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} // pass props to BlogPostPage component\n\n\nexport async function getStaticProps(context) {\n  const fs = require(\"fs\");\n\n  const html = require(\"remark-html\");\n\n  const highlight = require(\"remark-highlight.js\");\n\n  const unified = require(\"unified\");\n\n  const markdown = require(\"remark-parse\");\n\n  const matter = require(\"gray-matter\");\n\n  const slug = context.params.slug; // get slug from params\n\n  const path = `${process.cwd()}/contents/${slug}.md`; // read file content and store into rawContent variable\n\n  const rawContent = fs.readFileSync(path, {\n    encoding: \"utf-8\"\n  });\n  const {\n    data,\n    content\n  } = matter(rawContent); // pass rawContent to gray-matter to get data and content\n\n  const result = await unified().use(markdown).use(highlight) // highlight code block\n  .use(html).process(content); // pass content to process\n\n  return {\n    props: {\n      blog: _objectSpread(_objectSpread({}, data), {}, {\n        content: result.toString()\n      })\n    }\n  };\n} // generate HTML paths at build time\n\nexport async function getStaticPaths(context) {\n  const fs = require(\"fs\");\n\n  const path = `${process.cwd()}/contents`;\n  const files = fs.readdirSync(path, \"utf-8\");\n  const markdownFileNames = files.filter(fn => fn.endsWith(\".md\")).map(fn => fn.replace(\".md\", \"\"));\n  return {\n    paths: markdownFileNames.map(fileName => {\n      return {\n        params: {\n          slug: fileName\n        }\n      };\n    }),\n    fallback: false\n  };\n}\nexport default BlogPostPage;","map":{"version":3,"sources":["/Users/giaconi/code/giaconi/blog-aerdevacanta/pages/[slug].js"],"names":["React","BlogPostPage","props","blog","title","__html","content","getStaticProps","context","fs","require","html","highlight","unified","markdown","matter","slug","params","path","process","cwd","rawContent","readFileSync","encoding","data","result","use","toString","getStaticPaths","files","readdirSync","markdownFileNames","filter","fn","endsWith","map","replace","paths","fileName","fallback"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,sBACE;AAAA,4BACQ;AAAA,gBAAKA,KAAK,CAACC,IAAN,CAAWC;AAAhB;AAAA;AAAA;AAAA;AAAA,YADR,eAEE;AAAS,MAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAEH,KAAK,CAACC,IAAN,CAAWG;AAArB;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,C,CAED;;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,QAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,QAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMI,QAAQ,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,QAAMK,MAAM,GAAGL,OAAO,CAAC,aAAD,CAAtB;;AAEA,QAAMM,IAAI,GAAGR,OAAO,CAACS,MAAR,CAAeD,IAA5B,CAR4C,CAQV;;AAClC,QAAME,IAAI,GAAI,GAAEC,OAAO,CAACC,GAAR,EAAc,aAAYJ,IAAK,KAA/C,CAT4C,CAW1C;;AACA,QAAMK,UAAU,GAAGZ,EAAE,CAACa,YAAH,CAAgBJ,IAAhB,EAAsB;AACzCK,IAAAA,QAAQ,EAAE;AAD+B,GAAtB,CAAnB;AAIF,QAAM;AAAEC,IAAAA,IAAF;AAAQlB,IAAAA;AAAR,MAAoBS,MAAM,CAACM,UAAD,CAAhC,CAhB4C,CAgBE;;AAE9C,QAAMI,MAAM,GAAG,MAAMZ,OAAO,GACzBa,GADkB,CACdZ,QADc,EAElBY,GAFkB,CAEdd,SAFc,EAEH;AAFG,GAGlBc,GAHkB,CAGdf,IAHc,EAIlBQ,OAJkB,CAIVb,OAJU,CAArB,CAlB4C,CAsBvB;;AAErB,SAAO;AACLJ,IAAAA,KAAK,EAAE;AACCC,MAAAA,IAAI,kCACGqB,IADH;AAENlB,QAAAA,OAAO,EAAEmB,MAAM,CAACE,QAAP;AAFH;AADL;AADF,GAAP;AAQD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BpB,OAA9B,EAAuC;AAC5C,QAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEE,QAAMQ,IAAI,GAAI,GAAEC,OAAO,CAACC,GAAR,EAAc,WAA9B;AACF,QAAMS,KAAK,GAAGpB,EAAE,CAACqB,WAAH,CAAeZ,IAAf,EAAqB,OAArB,CAAd;AAEE,QAAMa,iBAAiB,GAAGF,KAAK,CAC9BG,MADyB,CACjBC,EAAD,IAAQA,EAAE,CAACC,QAAH,CAAY,KAAZ,CADU,EAEzBC,GAFyB,CAEpBF,EAAD,IAAQA,EAAE,CAACG,OAAH,CAAW,KAAX,EAAkB,EAAlB,CAFa,CAA1B;AAIF,SAAO;AACLC,IAAAA,KAAK,EAAEN,iBAAiB,CAACI,GAAlB,CAAuBG,QAAD,IAAc;AACzC,aAAO;AACLrB,QAAAA,MAAM,EAAE;AACND,UAAAA,IAAI,EAAEsB;AADA;AADH,OAAP;AAKD,KANM,CADF;AAQLC,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD;AAED,eAAetC,YAAf","sourcesContent":["// file: pages/blog/[slug].js\nimport React from \"react\";\n\nfunction BlogPostPage(props) {\n  return (\n    <div>\n            <h1>{props.blog.title}</h1>\n      <section dangerouslySetInnerHTML={{ __html: props.blog.content }}></section>\n    </div>\n  );\n}\n\n// pass props to BlogPostPage component\nexport async function getStaticProps(context) {\n  const fs = require(\"fs\");\n  const html = require(\"remark-html\");\n  const highlight = require(\"remark-highlight.js\");\n  const unified = require(\"unified\");\n  const markdown = require(\"remark-parse\");\n  const matter = require(\"gray-matter\");\n\n  const slug = context.params.slug; // get slug from params\n  const path = `${process.cwd()}/contents/${slug}.md`;\n\n    // read file content and store into rawContent variable\n    const rawContent = fs.readFileSync(path, {\n    encoding: \"utf-8\",\n  });\n\n  const { data, content } = matter(rawContent); // pass rawContent to gray-matter to get data and content\n\n  const result = await unified()\n    .use(markdown)\n    .use(highlight) // highlight code block\n    .use(html)\n    .process(content); // pass content to process\n\n  return {\n    props: {\n            blog: {\n                ...data,\n          content: result.toString(),\n            }\n    },\n  };\n}\n\n// generate HTML paths at build time\nexport async function getStaticPaths(context) {\n  const fs = require(\"fs\");\n\n    const path = `${process.cwd()}/contents`;\n  const files = fs.readdirSync(path, \"utf-8\");\n\n    const markdownFileNames = files\n    .filter((fn) => fn.endsWith(\".md\"))\n    .map((fn) => fn.replace(\".md\", \"\"));\n\n  return {\n    paths: markdownFileNames.map((fileName) => {\n      return {\n        params: {\n          slug: fileName,\n        },\n      };\n    }),\n    fallback: false,\n  };\n}\n\nexport default BlogPostPage;"]},"metadata":{},"sourceType":"module"}